# Filename: schema.graphql
# Author: Peter Laudat
# Must have the Query type at minimum.

# Put this in place to handle dates natively
scalar GraphQLDate

# Restrict issue statuses to the following possible values
enum StatusType {
  New
  Assigned
  Fixed
  Closed
}

# Define Issue type
type Issue {
  _id: ID!
  id: Int!
  title: String!
  status: StatusType!
  owner: String
  effort: Int
  created: GraphQLDate!
  due: GraphQLDate
  description: String
}

type IssueCounts{
  owner: String!
  New: Int
  Assigned: Int
  Fixed: Int
  Closed: Int
}

type IssueListWithPages{
  issues: [Issue!]!
  pages: Int
}

type User {
  signedIn: Boolean!
  givenName: String
  name: String
  email: String
}

# Added IssueInputs to enable new issue creation
"Toned down Issue, used as inputs, without server generated values."
input IssueInputs {
  title: String!
  "Optional, if not supplied, will be set to 'New'"
  status: StatusType = New
  owner: String
  effort: Int
  due: GraphQLDate
  description: String
}

"""Inputs for issueUpdate: all are optional. Whichever is specified will be set to the given value, undefined fields will remain unmodified. """
input IssueUpdateInputs{
  title: String
  status: StatusType
  owner: String
  effort: Int
  due: GraphQLDate
  description: String
}

# Top level types Query and Mutation are entry points into the type
# system. All other APIs or fields are defined hierarchically under
# these two types, which are like entry points into the API.
# Query fields are expected to return existing state and mutation fields
# are expected to change something in the application's data.

# Query is mandatory schema type that returns state and executes in parallel.
# Use it exclusively to implement READ.

type Query {
  about: String! # Simple api that returns a string
  user: User!
  issueList(
    status: StatusType
    effortMin: Int
    effortMax: Int
    search: String
    page: Int = 1
    ): IssueListWithPages
  issue(id: Int!): Issue!
  issueCounts(
    status: StatusType
    effortMin: Int
    effortMax: Int
  ): [IssueCounts!]!
}

# Mutation is optional schema type that modifies state and executes in series.
# Use it exclusively for CREATE, UPDATE, DELETE operations.

type Mutation {
  setAboutMessage(message: String!): String # Simple api that sets a message with a string
  issueAdd(issue: IssueInputs!): Issue!
  issueUpdate(id: Int!, changes: IssueUpdateInputs!): Issue!
  issueDelete(id: Int!): Boolean!
  issueRestore(id: Int!): Boolean!
}
